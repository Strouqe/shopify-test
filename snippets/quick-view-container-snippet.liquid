{%- comment -%}
  SNIPPET: quick-view-container-snippet.liquid
  This contains the modal's HTML structure and the JavaScript logic to control it.
{%- endcomment -%}

<div id="quick-view-modal-container" class="quick-view-modal" style="display: none;">
  <div class="quick-view-modal__content">
    <button id="quick-view-modal-close" class="quick-view-modal__close">&times;</button>
    <div id="quick-view-modal-product-content"></div>
    <div class="quick-view-modal__nav-wrapper">
      <button id="quick-view-modal-prev" class="quick-view-modal__nav">Previous product</button>
      <button id="quick-view-modal-next" class="quick-view-modal__nav">Next product</button>
    </div>
  </div>
</div>

<script>
  class QuickViewFeature {
    constructor() {
      this.modal = document.getElementById('quick-view-modal-container');
      this.closeButton = document.getElementById('quick-view-modal-close');
      this.productContent = document.getElementById('quick-view-modal-product-content');
      this.prevButton = document.getElementById('quick-view-modal-prev');
      this.nextButton = document.getElementById('quick-view-modal-next');
      
      this.productHandles = [];
      this.currentIndex = -1;

      this.initEventListeners();
    }

    initEventListeners() {
      document.body.addEventListener('click', (event) => {
        const button = event.target.closest('button[data-quick-view-handle]');
        if (button) {
          event.preventDefault();
          this.openModal(button.dataset.quickViewHandle);
        }
      });

      this.closeButton.addEventListener('click', () => this.closeModal());
      this.modal.addEventListener('click', (event) => {
        if (event.target === this.modal) this.closeModal();
      });
      this.prevButton.addEventListener('click', () => this.showPreviousProduct());
      this.nextButton.addEventListener('click', () => this.showNextProduct());
    }

    openModal(productHandle) {
      const productCardButtons = document.querySelectorAll('button[data-quick-view-handle]');
      this.productHandles = Array.from(productCardButtons).map(button => button.dataset.quickViewHandle);
      this.currentIndex = this.productHandles.indexOf(productHandle);
      
      this.modal.style.display = 'flex';
      this.fetchProduct(productHandle);
      this.updateNavButtons();
    }

    closeModal() {
      this.modal.style.display = 'none';
      this.productContent.innerHTML = '';
    }

    fetchProduct(productHandle) {
      this.productContent.innerHTML = '<p>Loading...</p>';
      
      fetch(`/products/${productHandle}?section_id=quick-view-section`)
        .then(response => response.text())
        .then(text => {
          const html = new DOMParser().parseFromString(text, 'text/html');
          const sectionContent = html.querySelector('.shopify-section');
          if (sectionContent) {
            this.productContent.innerHTML = sectionContent.innerHTML;
            this.executeScripts(this.productContent);
          } else {
            this.productContent.innerHTML = '<p>Error loading content.</p>';
          }
        })
        .catch(error => {
          console.error('Quick View Fetch Error:', error);
          this.productContent.innerHTML = '<p>Error fetching product.</p>';
        });
    }

    executeScripts(container) {
      container.querySelectorAll('script').forEach(script => {
        const newScript = document.createElement('script');
        script.getAttributeNames().forEach(attr => newScript.setAttribute(attr, script.getAttribute(attr)));
        if (script.innerHTML) {
          newScript.appendChild(document.createTextNode(script.innerHTML));
        }
        script.parentNode.replaceChild(newScript, script);
      });
    }

    showPreviousProduct() {
      if (this.currentIndex > 0) {
        this.currentIndex--;
        this.fetchProduct(this.productHandles[this.currentIndex]);
        this.updateNavButtons();
      }
    }

    showNextProduct() {
      if (this.currentIndex < this.productHandles.length - 1) {
        this.currentIndex++;
        this.fetchProduct(this.productHandles[this.currentIndex]);
        this.updateNavButtons();
      }
    }

    updateNavButtons() {
      this.prevButton.style.visibility = this.currentIndex === 0 ? 'hidden' : 'visible';
      this.nextButton.style.visibility = this.currentIndex === this.productHandles.length - 1 ? 'hidden' : 'visible';
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new QuickViewFeature();
  });
</script>

{% stylesheet %}
  .quick-view-modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); display: flex; justify-content: center; align-items: center; z-index: 100; }
  .quick-view-modal__content { background-color: white; padding: 40px; padding-bottom: 60px; border-radius: 5px; position: relative; width: 672px; max-width: 90vw; height: 500px; max-height: 80vh; overflow-y: auto; display: flex; flex-direction: column; justify-content: center; }
  .quick-view-modal__close { position: absolute; top: 15px; right: 15px; border: none; background: none; font-size: 24px; cursor: pointer; z-index: 102; }
  .quick-view-modal__nav-wrapper { position: absolute; bottom: 20px; left: 40px; right: 40px; display: flex; justify-content: space-between; align-items: center; pointer-events: none; }
  .quick-view-modal__nav { background: none; border: none; cursor: pointer; font-size: 14px; color: #555; padding: 0; pointer-events: auto; transition: color 0.2s; }
  .quick-view-modal__nav:hover { color: #000; text-decoration: underline; }
{% endstylesheet %}