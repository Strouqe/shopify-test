{% doc %}
  Renders a quick view button that opens a modal dialog.
  The content of the dialog is composed of nested blocks.

  @example
  {% content_for 'block', type: 'quick-view-button', id: 'quick-view-button' %}
{% enddoc %}

<div {{ block.shopify_attributes }}>
  {%- liquid
    assign button_id = 'quick-view-button-' | append: block.id
    assign modal_id = 'quick-view-modal-' | append: block.id
  -%}

  <button
    type="button"
    id="{{ button_id }}"
    class="{{ block.settings.style_class | default: 'button' }}"
    aria-controls="{{ modal_id }}"
    aria-expanded="false"
    data-dialog-id="{{ modal_id }}"
  >
    {{ block.settings.label | default: 'Quick View' }}
  </button>

  <dialog-element
    class="dialog"
    id="{{ modal_id }}"
    aria-labelledby="{{ button_id }}"
  >
    <div class="dialog__content">
      <div class="dialog__header">
        <button
          class="dialog__close"
          aria-label="{{ 'general.accessibility.close' | t }}"
          data-dialog-id="{{ modal_id }}"
        >
          {% render 'icon-close' %}
        </button>
      </div>
      <div class="dialog__body">
        {%- content_for 'blocks' -%}
      </div>
    </div>
  </dialog-element>
</div>

{% javascript %}
  if (!customElements.get('dialog-element')) {
    class DialogElement extends HTMLElement {
      constructor() {
        super();
        this.dialog = this;
        this.dialogId = this.id;
        this.openButtons = document.querySelectorAll(`[data-dialog-id="${this.dialogId}"]`);
        this.closeButtons = this.querySelectorAll(`[data-dialog-id="${this.dialogId}"]`);

        this.openButtons.forEach(button => button.addEventListener('click', this.open.bind(this)));
        this.closeButtons.forEach(button => button.addEventListener('click', this.close.bind(this)));
      }

      open(event) {
        event.preventDefault();
        this.dialog.showModal();
      }

      close() {
        this.dialog.close();
      }
    }
    customElements.define('dialog-element', DialogElement);
  }
{% endjavascript %}

{% stylesheet %}
  dialog-element {
    border: none;
    padding: 0;
    background: transparent;
    max-width: 80vw;
    max-height: 80vh;
  }

  dialog-element::backdrop {
    background: rgba(0, 0, 0, 0.5);
  }

  .dialog__content {
    background: rgb(var(--color-background));
    color: rgb(var(--color-foreground));
    padding: 2rem;
    border-radius: 0.5rem;
    position: relative;
  }

  .dialog__header {
    display: flex;
    justify-content: flex-end;
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
  }

  .dialog__close {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
  }

  .dialog__close .icon {
    width: 1.5rem;
    height: 1.5rem;
  }
{% endstylesheet %}

{% schema %}
{
  "name": "Quick View Button",
  "blocks": [
    {
      "type": "@theme"
    }
  ],
  "settings": [
    {
      "type": "text",
      "id": "label",
      "label": "t:settings.label",
      "default": "Quick View"
    },
    {
      "type": "select",
      "id": "style_class",
      "label": "t:settings.style",
      "options": [
        {
          "value": "button",
          "label": "t:options.primary"
        },
        {
          "value": "button-secondary",
          "label": "t:options.secondary"
        },
        {
          "value": "link",
          "label": "t:options.link"
        }
      ],
      "default": "button"
    }
  ]
}
{% endschema %}