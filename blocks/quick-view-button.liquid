


<div {{ block.shopify_attributes }}>
  {%- liquid
    assign product_object = closest.product
    if product_object == blank
      assign product_object = product_card_product
    endif
    if product_object == blank
      assign product_object = product
    endif

    assign has_product = false
    if product_object and product_object != blank
      assign has_product = true
    endif

    assign button_id = 'popup-button-' | append: block.id
    assign modal_id = 'popup-modal-' | append: block.id
    assign button_title = block.settings.label | default: 'Quick View'
    if has_product and product_object.title != blank
      assign button_title = product_object.title
    endif

    assign variant_to_link = product_object.selected_or_first_available_variant
    assign combined_listing_count = product_object.options_with_values | map: 'values' | map: 'product_url' | compact | size
    assign no_swatch_selected = null

    unless combined_listing_count > 0
      if product_object.featured_media
        assign found_variant = false

        for variant in product_object.variants
          if variant.featured_media.id == product_object.featured_media.id
            assign variant_to_link = variant
            assign found_variant = true
            break
          endif
        endfor

        unless found_variant
          for option in product_object.options_with_values
            assign swatch_count = option.values | map: 'swatch' | compact | size
            if swatch_count > 1
              assign no_swatch_selected = true
              break
            endif
          endfor
        endunless
      endif
    endunless

    assign onboarding = false
    if product_object.id == empty or product_object == blank
      assign onboarding = true
    endif

    assign has_quick_add = false
    if settings.quick_add and product_object.available
      assign has_quick_add = true
    endif

    assign has_mobile_quick_add = false
    if has_quick_add and settings.mobile_quick_add
      assign has_mobile_quick_add = true
    endif
  -%}

  <button
    type="button"
    id="{{ button_id }}"
    class="button"
    aria-haspopup="dialog"
    aria-controls="{{ modal_id }}"
    aria-expanded="false"
    title="{{ button_title | escape }}"
    {% if has_product %}data-quick-view-handle="{{ product_object.handle }}"{% else %}disabled aria-disabled="true"{% endif %}
  >
    {{ block.settings.label | default: 'Quick View' }}
  </button>

  <dialog id="{{ modal_id }}" class="popup-dialog">
    <div class="popup-dialog__content">
      <button type="button" class="popup-dialog__close" aria-label="{{ 'accessibility.close' | t }}">
        &#x2715;
      </button>
      <div class="popup-dialog__body">
        {%- if has_product -%}
          <product-card
            class="product-card"
            data-product-id="{{ product_object.id }}"
            data-product-variants-size="{{ product_object.variants.size }}"
            id="product-card-{{ block.id }}"
            data-product-transition="{{ settings.transition_to_main_product }}"
            {% if no_swatch_selected %}
              data-no-swatch-selected="true"
            {% endif %}
            {% if onboarding %}
              data-placeholder="true"
            {% endif %}
          >
            <a
              {% unless onboarding %}
                href="{{ variant_to_link.url }}"
              {% endunless %}
              class="product-card__link"
              ref="productCardLink"
            >
              <span class="visually-hidden">
                {{ product_object.title }}
              </span>
            </a>
            <div 
              class="product-card__content layout-panel-flex layout-panel-flex--column product-grid__card spacing-style border-style gap-style"
              style="
                --quick-add-display: {% if has_quick_add %}flex{% else %}none{% endif %};
                --quick-add-mobile-display: {% if has_mobile_quick_add %}flex{% else %}none{% endif %};
              "
<!-- INTEGRATED EXISTING BLOCKS START -->
<div class="quick-view-image-container">
  {%- if product_object.featured_media -%}
    {{ product_object.featured_media | image_url: width: 600 | image_tag: loading: 'lazy' }}
  {%- endif -%}
</div>

<div class="quick-view-info-container">
  {% content_for 'block', type: 'product-title', id: 'qv-title' %}
  {% content_for 'block', type: 'price', id: 'qv-price' %}
  
  {%- if product_object.has_only_default_variant == false -%}
    {% content_for 'block', type: 'variant-picker', id: 'qv-variants' %}
  {%- endif -%}
  
  {% content_for 'block', type: 'buy-buttons', id: 'qv-buy-buttons' %}

  {%- if product_object.metafields.custom.care_instructions != blank -%}
    <div class="care-instructions">
      <h3>{{ 'products.product.care_instructions' | t }}</h3>
      <div>{{ product_object.metafields.custom.care_instructions }}</div>
    </div>
  {%- endif -%}
</div>
<!-- INTEGRATED EXISTING BLOCKS END -->
            </div>
          </product-card>
        {%- else -%}
          <div class="quick-view__empty-state">
            {{ 'products.product.unavailable' | t }}
          </div>
        {%- endif -%}
      </div>

      <div class="quick-view__nav">
        <a href="#" class="quick-view__nav-button" data-quick-view-prev aria-label="{{ 'accessibility.slideshow_previous' | t }}">
          Previous
        </a>
        <a href="#" class="quick-view__nav-button" data-quick-view-next aria-label="{{ 'accessibility.slideshow_next' | t }}">
          Next
        </a>
      </div>
    </div>
  </dialog>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const openButton = document.getElementById('{{ button_id }}');
    const dialog = document.getElementById('{{ modal_id }}');

    if (!openButton || !dialog) return;

    const closeButton = dialog.querySelector('.popup-dialog__close');
    if (!closeButton) return;

    const getQuickViewHandles = () => {
      return Array.from(document.querySelectorAll('[data-quick-view-handle]'))
        .map((button) => button.dataset.quickViewHandle)
        .filter((handle) => handle && handle !== '');
    };

    const updateNavState = (dialogElement) => {
      const prev = dialogElement.querySelector('[data-quick-view-prev]');
      const next = dialogElement.querySelector('[data-quick-view-next]');
      if (!prev || !next) return;

      const handles = dialogElement.dataset.quickViewHandles ? dialogElement.dataset.quickViewHandles.split(',') : [];
      const currentIndex = Number(dialogElement.dataset.quickViewIndex);

      if (!handles.length || currentIndex < 0) {
        prev.style.visibility = 'hidden';
        next.style.visibility = 'hidden';
        return;
      }

      if (currentIndex <= 0) {
        prev.style.visibility = 'hidden';
      } else {
        prev.style.visibility = 'visible';
      }

      if (currentIndex >= handles.length - 1) {
        next.style.visibility = 'hidden';
      } else {
        next.style.visibility = 'visible';
      }
    };

    const navigateQuickView = (dialogElement, direction) => {
      const handles = dialogElement.dataset.quickViewHandles ? dialogElement.dataset.quickViewHandles.split(',') : [];
      const currentIndex = Number(dialogElement.dataset.quickViewIndex);
      const targetIndex = currentIndex + direction;

      if (targetIndex < 0 || targetIndex >= handles.length) return;

      const targetHandle = handles[targetIndex];
      const targetButton = document.querySelector('[data-quick-view-handle="' + targetHandle + '"]');

      if (!targetButton) return;

      dialogElement.close();
      window.requestAnimationFrame(() => targetButton.click());
    };

    const bindNavigation = (dialogElement, triggerButton) => {
      const prev = dialogElement.querySelector('[data-quick-view-prev]');
      const next = dialogElement.querySelector('[data-quick-view-next]');
      if (!prev || !next) return;

      if (!dialogElement.dataset.quickViewNavBound) {
        prev.addEventListener('click', (event) => {
          event.preventDefault();
          navigateQuickView(dialogElement, -1);
        });

        next.addEventListener('click', (event) => {
          event.preventDefault();
          navigateQuickView(dialogElement, 1);
        });

        dialogElement.dataset.quickViewNavBound = 'true';
      }

      const handles = getQuickViewHandles();
      const currentHandle = triggerButton.dataset.quickViewHandle;
      const currentIndex = handles.indexOf(currentHandle);

      dialogElement.dataset.quickViewHandles = handles.join(',');
      dialogElement.dataset.quickViewIndex = currentIndex;

      updateNavState(dialogElement);
    };

    const setupQuickViewGallery = (dialogElement) => {
      if (dialogElement.dataset.quickViewGalleryBound === 'true') return;

      const display = dialogElement.querySelector('[data-quick-view-images]');
      if (!display) return;

      const images = Array.from(display.querySelectorAll('.quick-view__image'));
      const thumbnails = Array.from(dialogElement.querySelectorAll('[data-quick-view-thumbnail]'));
      if (!images.length) return;

      let activeIndex = 0;

      const setActiveImage = (index) => {
        activeIndex = index;
        images.forEach((image, i) => {
          if (i === index) {
            image.classList.add('is-active');
            image.removeAttribute('aria-hidden');
          } else {
            image.classList.remove('is-active');
            image.setAttribute('aria-hidden', 'true');
          }
        });
        thumbnails.forEach((thumb) => {
          const thumbIndex = Number(thumb.dataset.quickViewThumbnail);
          if (thumbIndex === index) {
            thumb.classList.add('is-active');
            thumb.setAttribute('aria-pressed', 'true');
          } else {
            thumb.classList.remove('is-active');
            thumb.setAttribute('aria-pressed', 'false');
          }
        });
      };

      const advanceImage = () => {
        if (images.length <= 1) return;
        const nextIndex = (activeIndex + 1) % images.length;
        setActiveImage(nextIndex);
      };

      display.addEventListener('click', (event) => {
        if (event.target.matches('.quick-view__thumbnail-image')) return;
        advanceImage();
      });

      thumbnails.forEach((thumb) => {
        thumb.addEventListener('click', (event) => {
          event.preventDefault();
          const index = Number(thumb.dataset.quickViewThumbnail);
          if (!Number.isNaN(index)) {
            setActiveImage(index);
          }
        });
      });

      setActiveImage(0);
      dialogElement.dataset.quickViewGalleryBound = 'true';
    };

    openButton.addEventListener('click', (event) => {
      if (openButton.disabled) return;

      event.preventDefault();
      dialog.showModal();
      openButton.setAttribute('aria-expanded', 'true');
      bindNavigation(dialog, openButton);
      setupQuickViewGallery(dialog);
    });

    const closeModal = () => {
      dialog.close();
      openButton.setAttribute('aria-expanded', 'false');
    };

    closeButton.addEventListener('click', closeModal);

    dialog.addEventListener('click', (event) => {
      if (event.target === dialog) {
        closeModal();
      }
    });
  });
</script>

{% stylesheet %}
  .popup-dialog { border: none; padding: 0; background: transparent; max-width: 760px;  position: relative; height:500px;}
  .popup-dialog::backdrop { background: rgba(0, 0, 0, 0.5); }
  .popup-dialog__content { background: white; color: inherit; padding: 40px 30px; position: relative; display: flex; flex-direction: column; gap: 1.5rem; height:fit-content;}
  
  /* Move close button outside the content area */
.popup-dialog__close { 
  position: absolute; 
  top: 5px; 
  right: 5px; 
  background: none !important; 
  border: none !important; 
  cursor: pointer; 
  padding: 8px; 
  color: inherit; 
  font-size: 24px; 
  line-height: 1; 
  z-index: 10; 
}

  /* Hide the product-card link that's causing layout issues */
  .popup-dialog .product-card__link {
    display: none !important;
  }

  /* Override the existing layout styles and force flexbox side-by-side */
  .popup-dialog .product-card__content {
    display: flex !important;
    flex-direction: row !important;
    gap: 2rem !important;
    align-items: flex-start !important;
  }

  /* Image container - left side, flexible width */
  .popup-dialog .quick-view-image-container {
    flex: 1 !important;
    display: flex !important;
    align-items: flex-start !important;
    justify-content: center !important;
    max-height: 350px !important;
    max-width: 322px  !important;
  }

  /* Info container - right side, fixed height with spacing */
  .popup-dialog .quick-view-info-container {
    flex: 1 !important;
    display: flex !important;
    flex-direction: column !important;
    gap: 1rem !important;
    height: fit-content;
    overflow-y: auto !important;
    padding: 1rem !important;
    border: 1px solid #e5e5e5 !important;
    border-radius: 4px !important;
  }

  /* Image styling */
  .popup-dialog .quick-view-image-container img {
    padding: auto 0;
    max-height: 415px;
    max-width: 318px;
    object-fit: contain;
  }

  /* Care instructions styling */
  .popup-dialog .care-instructions {
    margin-top: auto !important;
    padding-top: 1rem !important;
    border-top: 1px solid #e5e5e5 !important;
  }

  .popup-dialog .care-instructions h3 {
    margin: 0 0 0.75rem 0;
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .visually-hidden { position: absolute; overflow: hidden; clip: rect(0 0 0 0); height: 1px; width: 1px; margin: -1px; padding: 0; border: 0; }
  .quick-view__empty-state { padding: 1.5rem; text-align: center; }

  /* Navigation with proper spacing */
  .quick-view__nav { display: flex; justify-content: space-between; align-items: center; margin-top: auto; gap: 1rem; }
  .quick-view__nav-button { 
    color: inherit; 
    text-decoration: underline;
    cursor: pointer; 
    font-size: 0.875rem; 
    background: none;
    border: none;
    padding: 0;
  }
  .quick-view__nav-button:hover { 
    text-decoration: none;
  }
{% endstylesheet %}

{% schema %}
{
  "name": "Quick View Button",
  "blocks": [],
  "settings": [
    {
      "type": "text",
      "id": "label",
      "label": "Button Label",
      "default": "Quick View"
    }
  ]
}
{% endschema %}